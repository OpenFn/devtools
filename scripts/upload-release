#!/usr/bin/env node

// upload-release
// ==============
//
// Usage:
//
// `./scripts/upload-release -i ./builds/<file>`
//
// Options:
//
// * `-u` - Delete existing and re-upload if needed.
// * `-d` - Debug mode, show stack traces on errors.
//
// Github OAuth Token is required via `GH_TOKEN=...`
//
// Exit Code:
//
// * `0` - Success
// * `1` - Unexpected Error
// * `2` - Already Exists

let argv, GitHubApi;
try {
  argv = require('minimist')(process.argv.slice(2));
  const { Octokit } = require('@octokit/rest');
  GitHubApi = Octokit;
} catch (e) {
  console.log(e.message);
  console.log('Ensure all dependencies have been installed via: `npm install`');
  process.exit(1);
}

const fs = require('fs');
let owner = 'OpenFn',
  file,
  repo,
  debug,
  updateExisting,
  github,
  token;

try {
  file = argv.i;
  debug = argv.d || false;
  updateExisting = argv.u || false;

  if (!(token = process.env['GH_TOKEN'])) {
    throw new Error(
      'Github OAuth token not found, please set via GH_TOKEN=...'
    );
  }
  if (!file) throw new Error('Please specify file with -i <filename>.');

  const tag = 'v' + file.match(/(\d+\.\d+\.\d+)\.tgz$/)[1];
  repo = file.match(/\/([\w-]+)-v[\d\.]+\.tgz$/)[1];

  github = new GitHubApi({ auth: token });

  findBuildFor(tag)
    .then(uploadUnlessExists(file))
    .catch((e) => {
      logError(e);

      if (e instanceof AlreadyExists) {
        process.exitCode = 2;
      } else {
        process.exitCode = 1;
      }
    });
} catch (e) {
  console.log(e.message);
  process.exit(1);
}

function AlreadyExists(message) {
  this.name = 'AlreadyExists';
  this.message = message;
  this.stack = new Error().stack;
}

function logError(e) {
  if (debug) {
    console.error(e);
  } else {
    console.error(e.message);
  }

  return e;
}

function findBuildFor(tag) {
  return github.repos.getReleaseByTag({ owner, repo, tag }).catch((e) => {
    if (e.code == 404) {
      return Promise.reject(
        new Error(`${tag} does not exist for repo: ${repo}`)
      );
    }
    return Promise.reject(e);
  });
}

function uploadUnlessExists(file) {
  return (release) => {
    const existing = release.data.assets.filter(
      (a) => a.name == 'build.tgz'
    )[0];

    if (existing) {
      const localSize = fs.statSync(file).size;
      if (localSize == existing.size) {
        throw new AlreadyExists('Build already exists.');
      } else {
        if (!updateExisting) {
          throw new AlreadyExists(
            'Build exists but is a different size. Use -u option to update existing files.'
          );
        }
      }
    }

    return Promise.resolve(existing && updateExisting)
      .then((mustDelete) => {
        if (mustDelete)
          return github.repos.deleteReleaseAsset({
            owner,
            repo,
            asset_id: existing.id,
          });
      })
      .then(() => {
        console.log('Uploading release asset.');
        return github.repos
          .uploadReleaseAsset({
            owner,
            repo,
            name: 'build.tgz',
            release_id: release.data.id,
            data: fs.readFileSync(file),
          })
          .then((response) => {
            console.log(
              `âœ“ Build uploaded as release asset: ${response.data.browser_download_url}`
            );
          })
          .catch((err) => {
            if (err.status == 'ENOENT') {
              return Promise.reject(err);
            }
            return Promise.reject(new Error('Upload Failed.'));
          });
      });
  };
}
