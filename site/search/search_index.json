{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"OpenFn/devtools # A set of tools for writing & testing expressions, managing OpenFn projects, and developing new adaptors (language-packages). Up and running # Make sure you've got git (maybe GitBash for Windows?) And Node.js (version 6.11 or greater) Run git clone git@github.com:OpenFn/devtools.git for SSH or git clone https://github.com/OpenFn/devtools.git Run cd devtools Run ./install.sh to install core, language-common, and language-http Note: If you get a \"permission denied\" message when running ./install.sh , try run chmod +x ./install.sh then retry the install command. To install specific adaptors, run ./install.sh language-${name} You can run core from anywhere by using npm install -g for global install npm install -g github:openfn/core#master Usage # Execute takes: -l [language-package].Adaptor : The adaptor being used -e [expression.js]: The expression being tested -s [state.json] : The message data: {...} and credential configuration: {...} -o [output.json] : The file to which the output will be written Bash usage # ./core/lib/cli.js execute -l ./language-[XXX].Adaptor -s ./tmp/state.json -o ./tmp/output.json -e ./tmp/expression.js The --test option # ./core/lib/cli.js execute -l ./language-[XXX].Adaptor -s ./tmp/state.json -o ./tmp/output.json -e ./tmp/expression.js --test This intercepts all HTTP requests and displays the request information for debugging. .FakeAdaptor # Adaptors may provide dummy modules for testing. language-salesforce has a built-in .FakeAdaptor which allows a user to test expressions on data without sending them to a real Salesforce server. Instead of using -l ./language-salesforce.Adaptor , use -l./language-salesforce.FakeAdaptor to test expressions offline: ./core/lib/cli.js execute -l ./language-salesforce.FakeAdaptor -s ./tmp/state.json -o ./tmp/output.json -e ./tmp/expression.js Offline testing for other language-packages # For most standard language packages which make use of HTTP requests, you can add --test to the execute command to intercept all HTTP requests. Modifying or developing new adaptors # wip Pre-Requisites # Make is used so that our modern (es9) JavaScript can be run on older Node runtimes. wip","title":"Documentation"},{"location":"index.html#openfndevtools","text":"A set of tools for writing & testing expressions, managing OpenFn projects, and developing new adaptors (language-packages).","title":"OpenFn/devtools"},{"location":"index.html#up-and-running","text":"Make sure you've got git (maybe GitBash for Windows?) And Node.js (version 6.11 or greater) Run git clone git@github.com:OpenFn/devtools.git for SSH or git clone https://github.com/OpenFn/devtools.git Run cd devtools Run ./install.sh to install core, language-common, and language-http Note: If you get a \"permission denied\" message when running ./install.sh , try run chmod +x ./install.sh then retry the install command. To install specific adaptors, run ./install.sh language-${name} You can run core from anywhere by using npm install -g for global install npm install -g github:openfn/core#master","title":"Up and running"},{"location":"index.html#usage","text":"Execute takes: -l [language-package].Adaptor : The adaptor being used -e [expression.js]: The expression being tested -s [state.json] : The message data: {...} and credential configuration: {...} -o [output.json] : The file to which the output will be written","title":"Usage"},{"location":"index.html#bash-usage","text":"./core/lib/cli.js execute -l ./language-[XXX].Adaptor -s ./tmp/state.json -o ./tmp/output.json -e ./tmp/expression.js","title":"Bash usage"},{"location":"index.html#the-test-option","text":"./core/lib/cli.js execute -l ./language-[XXX].Adaptor -s ./tmp/state.json -o ./tmp/output.json -e ./tmp/expression.js --test This intercepts all HTTP requests and displays the request information for debugging.","title":"The --test option"},{"location":"index.html#fakeadaptor","text":"Adaptors may provide dummy modules for testing. language-salesforce has a built-in .FakeAdaptor which allows a user to test expressions on data without sending them to a real Salesforce server. Instead of using -l ./language-salesforce.Adaptor , use -l./language-salesforce.FakeAdaptor to test expressions offline: ./core/lib/cli.js execute -l ./language-salesforce.FakeAdaptor -s ./tmp/state.json -o ./tmp/output.json -e ./tmp/expression.js","title":".FakeAdaptor"},{"location":"index.html#offline-testing-for-other-language-packages","text":"For most standard language packages which make use of HTTP requests, you can add --test to the execute command to intercept all HTTP requests.","title":"Offline testing for other language-packages"},{"location":"index.html#modifying-or-developing-new-adaptors","text":"wip","title":"Modifying or developing new adaptors"},{"location":"index.html#pre-requisites","text":"Make is used so that our modern (es9) JavaScript can be run on older Node runtimes. wip","title":"Pre-Requisites"},{"location":"deploying.html","text":"Extra tools for adaptors # Scripts # In order to run the scripts, ensure you have cd'd into the project directory and enter ./scripts/<script-name> bootstrap # Installs packages and prepares the working directory. This needs to be run before running any of the other scripts. generate-doclets # Iterates overs all language pack folder names found in the repos list and creates a doclet json file in the doclets directory. analyse-doclets # Iterates overs all doclets found in doclets and gives a tree view of the doclet structure using jsdoc-query . bundle # Creates a tarball with all production dependencies install for a given module. Example: ./scripts/bundle-node language-common -o builds creates a language-common-v1.0.0.tgz file in the 'builds' directory. Arguments ./scripts/bundle-node <language> -o <output folder> -d -o - Output folder -d - Debug bundle-all # Runs bundle for all repos found in the list, and outputs them to the builds folder. upload-release # Uploads a tarball to a Github release. Example: 1 2 GH_TOKEN =< oauth - token > \\ ./ scripts / upload - release - i ./ builds / language - common - v0 . 0.0 . tgz Infers the repo name and version number from the file. Arguments ./scripts/upload-release -i <file> [-u] i - Path to build file to upload u - Update a file if already exists (and is a different size) A repos file for quick setup # Located in the root of the project, this file is a list of language pack git repo names used by the scripts in order to check out the packages from Github. Releasing a new adaptor version # Bump the version in package.json Commit Ensure there is a tag for the version. ( git tag ) This is handled with a git hook provided by bootstrap Push the commits and tag to GitHub git push && git push --tags Create a release Go to the associated repo on Github, click 'Releases' and then 'Draft a new release'. Select the version tag that was pushed in the last step. Write a title and release notes as needed. Click 'Publish release'. Return to the language-packages directory cd ../ to return to the language-packages directory. Bundle the module ./scripts/bundle-node <language-pack> -o builds or ./scripts/bundle-java <language-pack> -o builds Verify that there is a file in builds with the naming convention of: <language-pack>-<version>.tgz Upload the build Using the upload-release script: ./scripts/upload-release -i builds/<file> If the wrong file was uploaded or you want to replace the build on Github then use the -u flag which deletes the build from Github if the filesize is different. This script expects a GH_TOKEN env variable, which is an OAuth2 token you must get from Github (via the account page) Using a new adaptor in an OpenFn/platform instance # Add your release to the scripts/install-lp script. Add the version number to priv/adaptors.json . Add the bodySchema to CredentialView.js .","title":"Extras"},{"location":"deploying.html#extra-tools-for-adaptors","text":"","title":"Extra tools for adaptors"},{"location":"deploying.html#scripts","text":"In order to run the scripts, ensure you have cd'd into the project directory and enter ./scripts/<script-name>","title":"Scripts"},{"location":"deploying.html#bootstrap","text":"Installs packages and prepares the working directory. This needs to be run before running any of the other scripts.","title":"bootstrap"},{"location":"deploying.html#generate-doclets","text":"Iterates overs all language pack folder names found in the repos list and creates a doclet json file in the doclets directory.","title":"generate-doclets"},{"location":"deploying.html#analyse-doclets","text":"Iterates overs all doclets found in doclets and gives a tree view of the doclet structure using jsdoc-query .","title":"analyse-doclets"},{"location":"deploying.html#bundle","text":"Creates a tarball with all production dependencies install for a given module. Example: ./scripts/bundle-node language-common -o builds creates a language-common-v1.0.0.tgz file in the 'builds' directory. Arguments ./scripts/bundle-node <language> -o <output folder> -d -o - Output folder -d - Debug","title":"bundle"},{"location":"deploying.html#bundle-all","text":"Runs bundle for all repos found in the list, and outputs them to the builds folder.","title":"bundle-all"},{"location":"deploying.html#upload-release","text":"Uploads a tarball to a Github release. Example: 1 2 GH_TOKEN =< oauth - token > \\ ./ scripts / upload - release - i ./ builds / language - common - v0 . 0.0 . tgz Infers the repo name and version number from the file. Arguments ./scripts/upload-release -i <file> [-u] i - Path to build file to upload u - Update a file if already exists (and is a different size)","title":"upload-release"},{"location":"deploying.html#a-repos-file-for-quick-setup","text":"Located in the root of the project, this file is a list of language pack git repo names used by the scripts in order to check out the packages from Github.","title":"A repos file for quick setup"},{"location":"deploying.html#releasing-a-new-adaptor-version","text":"Bump the version in package.json Commit Ensure there is a tag for the version. ( git tag ) This is handled with a git hook provided by bootstrap Push the commits and tag to GitHub git push && git push --tags Create a release Go to the associated repo on Github, click 'Releases' and then 'Draft a new release'. Select the version tag that was pushed in the last step. Write a title and release notes as needed. Click 'Publish release'. Return to the language-packages directory cd ../ to return to the language-packages directory. Bundle the module ./scripts/bundle-node <language-pack> -o builds or ./scripts/bundle-java <language-pack> -o builds Verify that there is a file in builds with the naming convention of: <language-pack>-<version>.tgz Upload the build Using the upload-release script: ./scripts/upload-release -i builds/<file> If the wrong file was uploaded or you want to replace the build on Github then use the -u flag which deletes the build from Github if the filesize is different. This script expects a GH_TOKEN env variable, which is an OAuth2 token you must get from Github (via the account page)","title":"Releasing a new adaptor version"},{"location":"deploying.html#using-a-new-adaptor-in-an-openfnplatform-instance","text":"Add your release to the scripts/install-lp script. Add the version number to priv/adaptors.json . Add the bodySchema to CredentialView.js .","title":"Using a new adaptor in an OpenFn/platform instance"}]}